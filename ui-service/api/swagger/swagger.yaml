openapi: 3.0.0
info:
  title: "Guardian"
  description: "The Guardian is a modular open-source solution that includes best-in-class identity management and decentralized ledger technology (DLT) libraries. At the heart of the Guardian solution is a sophisticated Policy Workflow Engine (PWE) that enables applications to offer a requirements-based tokenization implementation."
  version: "1.0.0"
  contact:
    name: "API developer"
    url: "https://envisionblockchain.com"
    email: "info@envisionblockchain.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
- url: /api/v1
  description: version 1.0
components:
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Account:
      type: object
      required:
        - username
        - role
      properties:
        username:
          type: string
        role:
          type: string
        did:
          type: string
    Session:
      type: object
      required:
        - username
        - role
        - accessToken
      properties:
        username:
          type: string
        role:
          type: string
        accessToken:
          type: string
    User:
      type: object
      required:
        - username
        - role
      properties:
        confirmed:
          type: string
        failed:
          type: string
        username:
          type: string
        role:
          type: string
        hederaAccountId:
          type: string
        hederaAccountKey:
          type: string
        did:
          type: string
        didDocument:
            type: object
        vcDocument:
            type: object
        addressBook:
          type: object
          properties:
            appnetName:
              type: string
            addressBook:
              type: string
            didTopic:
              type: string
            vcTopic:
              type: string
            didServerUrl:
              type: string
            didTopicMemo:
              type: string
            vcTopicMemo:
              type: string
    Schema:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        entity:
          type: string
        hash:
          type: string
        status:
          type: string
        document:
          type: string
    ImportSchema:
      type: object
      properties:
        schemes:
          type: array
          items:
            type: object
            properties:
              document:
                type: string
              entity:
                type: string
              hash:
                type: string
              name:
                type: string
              uuid:
                type: string
    ExportSchema:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        messageId:
          type: string
    Token:
      type: object
      properties:
        changeSupply:
          type: boolean
        decimals:
          type: string
        enableAdmin:
          type: boolean
        enableFreeze:
          type: boolean
        enableKYC:
          type: boolean
        enableWipe:
          type: boolean
        initialSupply:
          type: string
        tokenName:
          type: string
        tokenSymbol:
          type: string
        tokenType:
          type: string
    TokenInfo:
      type: object
      properties:
        id:
          type: string
        tokenId:
          type: string
        tokenName:
          type: string
        tokenSymbol:
          type: string
        tokenType:
          type: string
        decimals:
          type: string
        associated:
          type: boolean
        balance:
          type: string
        frozen:
          type: boolean
        kyc:
          type: boolean
    PolicyConfig:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        topicDescription:
          type: string
        config:
          type: object
        status:
          type: string
        owner:
          type: string
        policyRoles:
          type: array
          items:
            type: string
        topicId:
          type: string
        policyTag:
          type: string
    TrustChains:
      type: object
      properties:
        chain:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              tag:
                type: string
              label:
                type: string
              schema:
                type: string
              owner:
                type: string
              document:
                type: object
        userMap:
          type: array
          items:
            type: object
            properties:
              did:
                type: string
              username:
                type: string
    VerifiablePresentation:
      type: object
      properties:
        hash:
          type: string
        id:
          type: string
        policyId:
          type: string
        signature:
          type: string
        status:
          type: string
        tag:
          type: string
        type:
          type: string
        updateDate:
          type: string
        createDate:
          type: string
        owner:
          type: string
        document:
          type: object
    PublishPolicy:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
        isValid:
          type: boolean
        policies:
          type: array
          items:
            type: object
    ValidatePolicy:
      type: object
      properties:
        config:
          type: object
        results:
          type: object
    PolicyBlock:
      type: object
      properties:
        id:
          type: string
        blockType:
          type: string
        isActive:
          type: boolean
        uiMetaData:
          type: object
        blocks:
          type: array
          items:
            type: object
    PolicyBlockData:
      type: object
      properties:
        id:
          type: string
        blockType:
          type: string
        isActive:
          type: boolean
        uiMetaData:
          type: object
        data: 
          type: object
        fields: 
          type: array
          items:
            type: object
        index:
          type: number
        roles: 
          type: array
          items:
            type: string
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/PolicyBlock'
    ExportPolicy:
      type: object
      properties:
        policy:
          type: object
        schemas:
          type: array
          items:
            type: object
        tokens:
          type: array
          items:
            type: object
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    ExternalData:
      type: object
      properties:
        owner:
          type: string
        policyTag:
          type: string
        document:
          type: object
    HederaAccount:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
tags:
  - name: "accounts"
    description: "Operations related to Guardian users"
  - name: "profiles"
    description: "Hedera profile related operations"
  - name: "schemas"
    description: "Operations with data schemas"
  - name: "tokens"
    description: "Everything about tokens"
  - name: "trustchains"
    description: "Audit and trust chain"
  - name: "policies"
    description: "Policy engine operations"
  - name: "external"
    description: "APIs for external data sources"
  - name: "demo"
    description: "Demo Only APIs"
  - name: "ipfs"
    description: "IPFS Operations"
paths:
  /accounts:
    get:
      tags:
        - accounts
      description: Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Returns a list of users, excluding Root Authority and Auditors.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/session:
    get:
      tags:
        - accounts
      description: Returns current user session.
      security:
      - bearerAuth: []
      summary: Returns current session of the user.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        401:
          description: Unauthorized.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/register:
    post:
      tags:
        - accounts
      summary: Registers a new user account.
      requestBody:
        description: Object that contain username, password and role (optional) fields.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/login:
    post:
      tags:
        - accounts
      summary: Logs user into the system.
      requestBody:
        description: Object that contains username and password fields.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profiles/{username}/balance:
    get:
      tags:
        - profiles
      description: Requests Hedera account balance. Only users with the Installer role are allowed to make the request.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The name of the user for whom to fetch the balance.
      security:
      - bearerAuth: []
      summary: Returns user's Hedera account balance.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profiles/{username}:
    get:
      tags:
        - profiles
      description: Returns user account information. For users with the Root Authority role it also returns address book and VC document information.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The name of the user for whom to fetch the information.
      security:
      - bearerAuth: []
      summary: Returns user account info.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - profiles
      description: Sets Hedera credentials for the user. For users with the Root Autority role it also creates an address book.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The name of the user for whom to update the information.
      security:
      - bearerAuth: []
      summary: Sets Hedera credentials for the user.
      requestBody:
        description: Object that contains the Hedera account data.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas:
    post:
      tags:
        - schemas
      description: Creates new schema. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Create new schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schema"
      responses:
        201:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - schemas
      description: Returns all schemas.
      security:
      - bearerAuth: []
      summary: Returns all schemas.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schemaId}/publish:
    put:
      tags:
        - schemas
      description: Publishes the schema with the provided schema ID.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
      - bearerAuth: []
      summary: Publishes the schema.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /schemas/{schemaId}/unpublish:
    put:
      tags:
        - schemas
      description: Unpublishes the schema with the provided schema ID.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
      - bearerAuth: []
      summary: Unpublishes the schema.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schemaId}:
    put:
      tags:
        - schemas
      description: Updates the schema with the provided schema ID.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
      - bearerAuth: []
      summary: Updates the schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schema"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - schemas
      description: Deletes the schema with the provided schema ID.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
      - bearerAuth: []
      summary: Deletes the schema.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/import:
    post:
      tags:
        - schemas
      description: Imports new schemas. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Imports new schemas.
      requestBody:
        description: Object that contains the array of schemas.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSchema"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/import/topic:
      post:
        tags:
          - schemas
        description: Imports new schema from IPFS. Only users with the Root Authority role are allowed to make the request.
        security:
        - bearerAuth: []
        summary: Imports new schema from IPFS.
        requestBody:
          description: Object that contains topic message identifier.
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
        responses:
          201:
            description: Successful operation.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Schema'
          401:
            description: Unauthorized.
          403:
            description: Forbidden.
          500:
            description: Internal server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /schemas/import/preview/{messageId}:
    get:
      tags:
        - schemas
      description: Schema preview by topic message. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: messageId
          schema:
            type: string
          required: true
          description: Message identifier.
      summary: Schema preview.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/export:
    post:
      tags:
        - schemas
      description: Exports selected schemas. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Exports selected schemas.
      requestBody:
        description: Object that contains IDs of schemas.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportSchema"
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens:
    get:
      tags:
        - tokens
      description: Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.
      security:
      - bearerAuth: []
      summary: Return a list of tokens.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenInfo'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - tokens
      description: Creates a new token. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Creates a new token.
      requestBody:
        description: Object that contains token information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/{username}/info:
    get:
      tags:
        - tokens
      description: Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/associate:
    put:
      tags:
        - tokens
      description: Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      security:
      - bearerAuth: []
      summary: Associates the user with the provided Hedera token.
      responses:
        200:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/dissociate:
    put:
      tags:
        - tokens
      description: Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      security:
      - bearerAuth: []
      summary: Associate the user with the provided Hedera token.
      responses:
        200:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/{username}/grantKyc:
    put:
      tags:
        - tokens
      description: Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
      - bearerAuth: []
      summary: Sets the KYC flag for the user.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /tokens/{tokenId}/{username}/revokeKyc:
    put:
      tags:
        - tokens
      description: Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
      - bearerAuth: []
      summary: Unsets the KYC flag for the user.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/{username}/freeze:
    put:
      tags:
        - tokens
      description: Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
      - bearerAuth: []
      summary: Freeze transfers of the specified token for the user.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /tokens/{tokenId}/{username}/unfreeze:
    put:
      tags:
        - tokens
      description: Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
      - bearerAuth: []
      summary: Unfreezes transfers of the specified token for the user.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /trustchains:
    get:
      tags:
        - trustchains
      description: Requests all VP documents. Only users with the Auditor role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Returns a list of all VP documents.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerifiablePresentation'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /trustchains/{hash}:
    get:
      tags:
        - trustchains
      description: Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: Hash or ID of a VP document.
      security:
      - bearerAuth: []
      summary: Returns a trustchain for a VP document.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustChains'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies:
    get:
      tags:
        - policies
      description: Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return a list of all policies.
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyConfig'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - policies
      description: Creates a new policy. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Creates a new policy.
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyConfig"
      responses:
        200:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/{policyId}:
    get:
      tags:
        - policies
      description: Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Retrieves policy configuration.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyConfig'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - policies
      description: Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
      summary: Updates policy configuration.
      parameters:
        - in: path
          name: policyId
          description: Selected policy ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyConfig"
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyConfig'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/{policyId}/publish:
    put:
      tags:
        - policies
      description: Publishes selected policy. Only users with the Root Authority role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  policyVersion:
                    type: string
      summary: Publishes policy.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPolicy'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/validate:
    post:
      tags:
        - policies
      description: Validates selected policy. Only users with the Root Authority role are allowed to make the request.
      security:
      - bearerAuth: []
      summary: Validates policy.
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyConfig"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatePolicy'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /policies/{policyId}/blocks:
    get:
      tags:
        - policies
      description: Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Retrieves data for the policy root block.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlock'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /policies/{policyId}/blocks/{uuid}:
    get:
      tags:
        - policies
      description: Requests block data. Only users with a role that described in block are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected block UUID.
      summary: Requests block data.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlockData'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - policies
      description: Sends data to the specified block.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected block UUID.
      summary: Sends data to the specified block.
      requestBody:
        description: Object with the data to be sent to the block.
        required: true
        content:
          application/json:
            schema:
              type: object
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /policies/{policyId}/tag/{tag}:
    get:
      tags:
        - policies
      description: Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Tag from the selected policy.
      summary: Requests block ID from a policy by tag.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /policies/{policyId}/export:
    get:
      tags:
        - policies
      description: Exports selected policy as a zip file.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      security:
      - bearerAuth: []
      summary: Policy export.
      responses:
        200:
          description: Successful operation.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
          
  /policies/import:
    post:
      tags:
        - policies
      description: Imports policy from a policy config JSON.
      security:
      - bearerAuth: []
      summary: Policy import.
      requestBody:
        description: Object that contains policy config.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportPolicy"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyConfig'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  
  /policies/import/topic:
    post:
      tags:
        - policies
      description: Imports new policy from IPFS.
      security:
      - bearerAuth: []
      summary: Imports new policy from IPFS.
      requestBody:
        description: Object that contains topic message identifier.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyConfig'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/import/preview/{messageId}:
      get:
        tags:
          - policies
        description: Policy preview by topic message.
        parameters:
          - in: path
            name: messageId
            schema:
              type: string
            required: true
            description: Message identifier.
        summary: Policy preview.
        security:
        - bearerAuth: []
        responses:
          200:
            description: Successful operation.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExportPolicy'
          401:
            description: Unauthorized.
          403:
            description: Forbidden.
          500:
            description: Internal server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /policies/import/preview:
    post:
      tags:
        - policies
      description: Returns content of the uploaded policy.
      summary: Preview policy content.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportPolicy'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /external:
    post:
      tags:
        - external 
      description: Sends data from an external source.
      summary: Sends data from an external source.
      requestBody:
        description: Object that contains a VC Document.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalData"
      responses:
        201:
          description: Successful operation.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
          
  /demo/registeredUsers:
    get:
      tags:
        - demo
      deprecated: true
      description: Returns all registered user accounts.
      responses:
        200:
          description: All registered user accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /demo/randomKey:
    get:
      tags:
        - demo
      deprecated: true
      description: Generates a new Hedera account with a random private key.
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HederaAccount'
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ipfs/file:
    post:
      tags:
        - ipfs 
      description: Add file to ipfs.
      summary: Add file to ipfs.
      requestBody: 
        description: Data array of file.
        required: true
        content:
          binary/octet-stream:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                description: CID of added file.
                type: string
        401:
          description: Unauthorized.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'